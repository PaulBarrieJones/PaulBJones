#######################################################################################################################


#### Paul Jones - Take-Two - Script Example 3 - PasswordReset247
####
#### Due to Covid forcing remote working it was impossible for users to come to the service desk to change their password.
#### A strict one-month password reset policy meant that many users passwords expired, or they had forgotten it.
#### The new remote working Windows Virtual Desktop solution required a working domain account to register for MFA.
#### Password writeback could be enabled for security reasons so self service was not an option in this case.
#### I designed and scripted the following solution to collect a subset of users personal data from the HR DB so the users
#### could verify thier identity safely over the telephone. With this solution the service desk never sees any of the user
#### data, they are presented with questions to read to the user, who responds. If answers are correct the password is 
#### reset and a partial password is read back to the user with instructions on the second half which is also personal, 
#### only the user would know. The service desk never sees the full password. 
#### This solution consists of 2 scripts, 1 is the frontend script, which is used by the service desk, the second script
#### runs as a broker service on the back-end server. This is the script I have shown below.
#### The broker service protects the user data export from the HR database which can only be accessed by the service account.
#### This solution was completed in approx. 8 hours and was and emergency.


#######################################################################################################################


# # Requires -Module %  >
# # Requires PowerShell Version 3 or above  >

<#

.SYNOPSIS
  Service to allow password reset via telephone. 

.DESCRIPTION
This script runs as a service on the automation server. A CSV file is generated by sister script (front end service used by service desk).
This is collected and questions are generated from user data, this is formed into questions which are presented on the front end to be 
read to user by service desk. Successful responses will trigger password reset, this is a combination of a safe-word plus part of user data 
know only to them. These combined form the new password. The service desk agent never sees the full password, this remains private to the
end user. See documentation for more information.

.INPUTS


.OUTPUTS


.NOTES
  Version:          3
  Author:           Paul Jones
  Creation Date:    22/03/2020
  Purpose/Change:   Project, solution
  Change Ref:       CAB000000
  Change Type:      Emergency
  
.EXAMPLE
  None

#>


#---------------------------------------------------------[Initialisations]--------------------------------------------------------

# Gather initial system varibles at PowerShell instance start
$DefaultVariables = Get-Variable | Select-Object -ExpandProperty Name

# Set Error Verbose and Warning
$ErrorActionPreference = "Continue"
$VerbosePreference = "continue"
$WarningPreference = "continue"
$ExitCode = 0

# Load Required Module/Function Libraries
Import-Module ACTIVEDIRECTORY | Out-null

  
#----------------------------------------------------------[Declarations]----------------------------------------------------------

# Script Version
$ScriptVersion = "1"
$ProjectName = "PasswordReset247"
$ProjectPath = "C:\PowerShell\Projects\$ProjectName"
$LogFilePath = "$ProjectPath\Logs\$ProjectName.log"
$ScriptPath = "$ProjectPath\Scripts\"
$DataPath = "$ProjectPath\Data"
$Stage1Path = "$DataPath\Stage1"
$Stage2Path = "$DataPath\Stage2"
$Stage3Path = "$DataPath\Stage3"


# Log File Info
$LogFilePath = "$ProjectPath\Logs\$ProjectName.log"

# Payload file
$Global:CheckData = Import-Csv "$ProjectPath\secure\Employee_validation_questions.csv"


#-----------------------------------------------------------[Functions]------------------------------------------------------------

### Logging function

function Write-Log {
    
    param (
        
        [Parameter(Mandatory=$False, Position=0)]
        [String]$Entry
    
    )

    "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss.fff') $Entry" | Out-File -FilePath $LogFilePath -Append
}



#-----------------------------------------------------------[Execution]------------------------------------------------------------

### Log Start
Write-Log -Entry "Script DHCP started on $(Get-Date -Format 'dddd, MMMM dd, yyyy')."
Write-Log -Entry "Script Version: $ScriptVersion"
Write-Log -Entry "Script Path: $ScriptPath"


###############
### STAGE 1 ###  Check user, get user data and prepare questions

# Get payload file, this will run until file is generated

While ((Get-ChildItem $Stage1Path) -eq $null -and $counter -ne 0) {

write-host "Waiting for a data file from main script to be uploaded to Stage1 folder..." -ForegroundColor Cyan


}

write-host "Loading CSV file" -ForegroundColor Green

# Find the job generated by front end
($CollectJobs = Get-ChildItem $Stage1Path  | Sort-Object -Descending LastWriteTime)[0]

write-host "Importing data"

# Import the job data
$Global:BrokerData = Import-csv $CollectJobs.fullname

# Match jobs to user
[ARRAY]$Global:UserData = $Global:CheckData | Where-Object {$_.USERNAME -eq $global:BrokerData.Generate}

###  Generate questions from user data and write to CSV file

## Q1 PostCode (1 of first 4 char)

write-host "Getting QA"

# Choose random number for question 1
$Q1Char = 1, 2, 3, 4 | Get-Random -Count 1

Switch ($Q1Char)

{

1 {$Q1A = $Global:UserData.'1ST_FOUR_POSTCODE'[0];$Q1Feed = "1st"}
2 {$Q1A = $Global:UserData.'1ST_FOUR_POSTCODE'[1];$Q1Feed = "2nd"}
3 {$Q1A = $Global:UserData.'1ST_FOUR_POSTCODE'[2];$Q1Feed = "3rd"}
4 {$Q1A = $Global:UserData.'1ST_FOUR_POSTCODE'[3];$Q1Feed = "4th"}

}

# Choose random number for question 2
$Global:BrokerData.Q1Feed = $Q1Feed 

## Q2 DOB (1 of first 4 char)
$Q2Char = 1, 2, 3, 4 | Get-Random -Count 1

Switch ($Q2Char)

{

1 {$Q2A = $Global:UserData.'1ST_FOUR_DOB'[0];$Q2Feed = "1st"}
2 {$Q2A = $Global:UserData.'1ST_FOUR_DOB'[1];$Q2Feed = "2nd"}
3 {$Q2A = $Global:UserData.'1ST_FOUR_DOB'[2];$Q2Feed = "3rd"}
4 {$Q2A = $Global:UserData.'1ST_FOUR_DOB'[3];$Q2Feed = "4th"}

}

#$BrokerData.check = $Q1A + $Q2A
$Global:BrokerData.Q2Feed = $Q2Feed

## Remove old CSV and add updated CSV

### Generate random word for session

write-host "delete original file" -ForegroundColor Green

# Clean up
Remove-Item $CollectJobs.FullName -Force

write-host "rewrite file with QA" -ForegroundColor Green

# Update the CSV file to be read by front-end
$Global:brokerData | Export-csv "$Stage2path\$CollectJobs" -NoClobber -NoTypeInformation -Force


###############
### STAGE 2 ### Check answers to questions and verify

While ((Import-csv "$Stage2path\$CollectJobs").A1feed -eq 0 -and $counter -ne 0) {
    
write-host "Waiting for data" -ForegroundColor Green
    

}

write-host "Importing data to check answers" -ForegroundColor Green

$filename = $CollectJobs.name 

# Load data jon file and check answers
$Global:BrokerData = Import-csv "$Stage2path\$filename"

# Combine questions into string
$Qs = $Q1a + $q2a

# Combine answers into string
$As = $Global:BrokerData.A1Feed + $Global:BrokerData.A2Feed

# Compare question string and answer string
If ($Qs -eq $As) {

write-host "Answers are correct" -ForegroundColor Green

# Mark job as approved
$Global:BrokerData.Approval = "True"

write-host "We are resetting" -ForegroundColor Green

# Construct the secure password

# Choose random word from safe word list
$PWPart1 = $Global:BrokerData.RandomWord

# Get first 4 charachters of postal code (ZIP)
$PWPart2 = $Global:UserData.'1ST_FOUR_POSTCODE'

# Get first 4 digits of DOB
$PWPart3 = $Global:UserData.'1ST_FOUR_DOB'

# Combine all 3 into string
$NewPasswordPlainText = $PWPart1 + $PWPart3 + $PWPart2

# Set new password on user account
Set-adaccountpassword $Global:BrokerData.Generate -reset -newpassword (ConvertTo-SecureString -AsPlainText $NewPasswordPlainText -Force) 

# Unlock AD account in the case of many failed attempts have locked account
Unlock-ADAccount â€“Identity $Global:BrokerData.Generate

# Update the CSV file to be read by front-end
$Global:brokerData | Export-csv "$Stage3path\$CollectJobs" -NoClobber -NoTypeInformation -Force

Write-Log -Entry "$($Global:BrokerData.User) Password Reset Successfully"


} 
    # Answers not correct!

    Else {
    
    # Edit data job file with approval failed
    $Global:BrokerData.Approval = "False"

    # Update the CSV file to be read by front-end
    $Global:brokerData | Export-csv "$Stage3path\$CollectJobs" -NoClobber -NoTypeInformation -Force

    Write-Log -Entry "$($Global:BrokerData.User) Failed Password Reset"

    }


###################################################################################################################################


#-----------------------------------------------------------[Cleanup]------------------------------------------------------------

$UserVariables = Get-Variable | Select-Object -ExpandProperty Name | Where-Object {$DefaultVariables -notcontains $_ -and $_ -ne "ExistingVariables"}
Remove-Variable $UserVariables
 

### Log End
Write-Log -Entry "Script DHCP ended ($ExitCode)."
### 

### Script END